//- chat [pug]/index.pug

//- pages/home/index.js
extend ../../layout/layout1.pug

block main_1
    div(class="custom-file-container" data-upload-id="abd")
    if user
        h2(class="text-2xl font-bold mb-4 text-center") Chat

        //- m√¥ t·∫£ c√°c kh·ªëi
        //- C√≥ 1 kh·ªëi chat ƒë·ªÉ hi·ªÉn th·ªã c√°c tin nh·∫Øn
        //- Tin c·ªßa m√¨nh s·∫Ω c√≥ m√†u xang v√† ·ªü b√™n ph·∫£i
        //- Tin c·ªßa ng∆∞·ªùi kh√°c s·∫Ω c√≥ m√†u x√°m v√† ·ªü b√™n tr√°i
        //- c√≥ 1 form ƒë·ªÉ g·ª≠i tin nh·∫Øn

        //- t·∫°m th·ªùi ch∆∞a c√≥ data l√™n s·∫Ω m√¥ ph·ªïng d·ªØ li·ªáu

        //- Container cƒÉn gi·ªØa khung chat
        //- Chat container
        div(class="flex justify-center")
            div(class="w-full max-w-md flex flex-col justify-between border rounded-xl bg-white shadow-md h-[400px] overflow-hidden")

                //- Chat messages container
                div(class="flex-1 overflow-y-auto p-4 space-y-2" id="chat-messages")
                    each message in chatList.sort((a, b) => new Date(a.time) - new Date(b.time))
                        - const isMine = user[0].token_client === message.user_id;
                        - const sender = userList.find(u => u.token_client === message.user_id);
                        - const content = message.content;
                        if isMine
                            div(class="flex justify-end mb-2")
                                div(class="bg-blue-500 text-white px-4 py-2 rounded-2xl max-w-[70%] text-sm shadow")
                                    | #{content}
                                    if message.imgage && message.imgage.length
                                        div(class="flex justify-end gap-2 mt-2 flex-wrap")
                                            each image in message.imgage
                                                div(class="w-1/3")
                                                    img(src=image, class="rounded-lg max-h-32 object-cover shadow")
                        else
                            div(class="flex justify-start mb-2")
                                div(class="bg-gray-200 text-gray-800 px-4 py-2 rounded-2xl max-w-[70%] text-sm shadow")
                                    b #{sender.fullname || 'Ng∆∞·ªùi l·∫°'}:
                                    br
                                    | #{content}
                                    if message.imgage && message.imgage.length
                                        div(class="flex justify-start gap-2 mt-2 flex-wrap")
                                            each image in message.imgage
                                                div(class="w-1/3")
                                                    img(src=image, class="rounded-lg max-h-32 object-cover shadow")

                //- Chat form
                form(class="flex items-center gap-2 border-t p-3")
                    //-V√πng hi·ªÉn th·ªã preview ·∫£nh 
                    div(id="image-preview" class=" overflow-x-auto overflow-y-auto pb-2 w-full max-w-full max-h-48 hide-scroll")
                    input(type="text" placeholder="Nh·∫≠p tin nh·∫Øn..." class="flex-1 border rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-400" id="message-input")
                    //-input ·∫©n 
                    input(type="file" id="file-input" style="display:none;" accept="image/*" multiple)

                    button(id="emoji-button" type="button" class="text-2xl p-2 hover:bg-gray-200 rounded-md")
                        |üòä
                    button(type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition" id="send-button")
                        i(class="fa-solid fa-paper-plane fa-beat" style="color: #FFD43B;")
                    button(type="button" id="click_input_file")
                        //- L·∫•y t·ª´ trong fornt awesome
                        <i class="fa-solid fa-file" style="color: #63E6BE;"></i>

                //- Emoji picker container
                div(id="emoji-picker-container" class="hidden absolute bg-white rounded-lg shadow-lg z-50 p-2 max-h-[300px] overflow-y-scroll border w-60 mt-2")
                    <emoji-picker class="w-full"></emoji-picker>
    script(src="/js/client/previewImgChat.js")
    //- script.
    //-     setInterval(() => {
    //-         console.log(temp);
    //-     }, 2000);
    script(src="/socket.io/socket.io.js")

    //- ch√∫ √Ω ph·∫£i c√≥ d·∫•u ch·∫•m ·ªü sau script ƒë·ªÉ th·ªÉ hi·ªán script n√†y l√† b√™n client
    script.
        function getCookie(name) {
            let cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                let c = cookies[i].trim();
                if (c.startsWith(name + '=')) {
                    return c.substring(name.length + 1);
                }
            }
            return null;
        }
        const socket = io();
        //- Khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn
        const button = document.querySelector('#send-button');
        console.log(button)
        button.addEventListener('click', function(event) {
            event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa form
            const input = document.querySelector('#message-input');
            const message = {
                text: input.value,
                image: temp // m·∫£ng c√°c file ·∫£nh ƒë√£ ch·ªçn trong previewImgChat.js
            }
            if (message.text.trim() !== '' || message.image.length !== 0) {
                //- G·ª≠i tin nh·∫Øn ƒë·∫øn server
                socket.emit('chat message', message);
                input.value = ''; // X√≥a √¥ nh·∫≠p sau khi g·ª≠i
                imagePreview.innerHTML = ''; // X√≥a v√πng hi·ªÉn th·ªã preview ·∫£nh sau khi g·ª≠i
                temp = []; // X√≥a m·∫£ng ·∫£nh ƒë√£ ch·ªçn sau khi g·ª≠i
            }
        });

            //- Nh·∫≠n tin nh·∫Øn t·ª´ server v√† hi·ªÉn th·ªã
        socket.on('server return', function(data) {
            const { user_id, name, content, image } = data;
            const isMine = getCookie("token_client") === user_id;
            const sender = name || 'Ng∆∞·ªùi l·∫°';
            if (content.trim() === '' && image.length === 0) return;

            const chatMessages = document.getElementById('chat-messages');

            // Outer wrapper: cƒÉn ph·∫£i/tr√°i
            const messageWrapper = document.createElement('div');
            messageWrapper.className = `flex ${isMine ? 'justify-end' : 'justify-start'} mb-2`;

            // N·ªôi dung tin nh·∫Øn (text + ·∫£nh)
            const messageBox = document.createElement('div');
            messageBox.className = `${isMine ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'} px-4 py-2 rounded-2xl max-w-[70%] text-sm shadow`;

            // Text content
            if (isMine) {
                messageBox.innerHTML = content;
            } else {
                messageBox.innerHTML = `<b>${sender}:</b><br>${content}`;
            }

            // N·∫øu c√≥ ·∫£nh th√¨ th√™m block ·∫£nh ngay b√™n d∆∞·ªõi n·ªôi dung
            if (image.length > 0) {
                const imageContainer = document.createElement('div');
                imageContainer.className = `flex ${isMine ? 'justify-end' : 'justify-start'} gap-2 mt-2 flex-wrap`;

                for (let i = 0; i < image.length; i++) {
                    const imageDiv = document.createElement('div');
                    imageDiv.className = 'w-1/3';
                    const img = document.createElement('img');
                    img.src = image[i];
                    img.className = 'rounded-lg max-h-32 object-cover shadow';
                    imageDiv.appendChild(img);
                    imageContainer.appendChild(imageDiv);
                }

                messageBox.appendChild(imageContainer);
            }

            // L·∫Øp v√†o khung chat
            messageWrapper.appendChild(messageBox);
            chatMessages.appendChild(messageWrapper);

            reloaKhungdChat();
        });

        var reloaKhungdChat = ()=>{
            var chatMessages = document.getElementById('chat-messages');
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        reloaKhungdChat();

    script.
        const button2 = document.querySelector('#emoji-button');
        const input2 = document.querySelector('#message-input');
        const emojiPicker = document.querySelector('emoji-picker');
        const emojiPickerContainer = document.querySelector('#emoji-picker-container');

        console.log(emojiPicker);

        // Khi nh·∫•n v√†o n√∫t emoji, hi·ªÉn th·ªã/·∫©n emoji picker
        button2.addEventListener('click', () => {
            emojiPickerContainer.classList.toggle('hidden'); // ·∫®n/hi·ªán emoji picker
        });

        // L·∫Øng nghe s·ª± ki·ªán khi ch·ªçn emoji
        emojiPicker.addEventListener('emoji-click', (event) => {
            input2.value += event.detail.unicode; // Th√™m emoji v√†o √¥ nh·∫≠p
            emojiPickerContainer.classList.add('hidden'); // ·∫®n emoji picker sau khi ch·ªçn emoji
        });

        // ƒê·∫£m b·∫£o emoji picker t·ª± ƒë·ªông ·∫©n n·∫øu nh·∫•n ra ngo√†i n√≥
        document.addEventListener('click', (event) => {
            if (!emojiPickerContainer.contains(event.target) && !button2.contains(event.target)) {
                emojiPickerContainer.classList.add('hidden');
            }
        });
    script.
        //- alert('ƒê√£ k·∫øt n·ªëi v·ªõi server');
        var input3 = document.getElementById('message-input');
        // ng∆∞·ªùi d√πng b√¢m enter ƒë·ªÉ g·ª≠i tin nh·∫Øn
        input3.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa form
                button.click(); // G·ªçi h√†m g·ª≠i tin nh·∫Øn
            }
        });
        //- B√°o v·ªÅ vi·ªác c√≥ ng∆∞·ªùi d√πng ƒëang typing
        input3.addEventListener('keydown', function(event) {
            if(event.key !== 'Enter') {
                socket.emit('typing', 'show');
            }
        });
        //- Danh s√°ch ngu·ªùi d√πng ƒëang typing
        var typingUsers = new Set(); // S·ª≠ d·ª•ng Set ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch ng∆∞·ªùi d√πng ƒëang typing
        //- Nh·∫≠n th√¥ng b√°o c√≥ ng∆∞·ªùi ƒëang typing

        socket.on("server typing", function(data) {
            const { name, user_id } = data;
            //- alert(name + ' ƒëang g√µ...'); // Hi·ªÉn th·ªã th√¥ng b√°o c√≥ ng∆∞·ªùi ƒëang typing
            //- N·∫øu ng∆∞·ªùi d√πng ƒë√£ c√≥ trong danh s√°ch th√¨ kh√¥ng th√™m v√†o n·ªØa v√† kh√¥ng g·ª≠i th√¥ng b√°o
            if (typingUsers.has(user_id)) return;
            typingUsers.add(user_id); // Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch typing v√† th·ª±c thi g·ª≠i th√¥ng b√°o
            //- const isMine = getCookie("token_client") === user_id; kh√¥ng c·∫ßn v√¨ typing l√† c·ªßa ng∆∞·ªùi kh√°c
            const sender = name || 'Ng∆∞·ªùi l·∫°';
            //- √Ω t∆∞·ªüng l√† m·ªói khi nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o ai ƒë√≥ ƒëag typing t·ª´ server s·∫Ω th√™m v√†o cu·ªëi khung chat
            var chatMessages = document.getElementById('chat-messages');
            var newMessage;
            if(chatMessages.querySelector(`.${user_id}`)) {
                newMessage = chatMessages.querySelector(`.${user_id}`);
            } else {
                newMessage = document.createElement('div');
            }
            //- G√°n v√†o cu·ªëi khung chat
            chatMessages.appendChild(newMessage);
            //- Ch·ªânh l·∫°i n·ªôi dung c·ªßa tin nh·∫Øn
            newMessage.className = 'flex justify-start' + ` ${user_id}`; // Th√™m class ƒë·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng ƒëang typing
            newMessage.innerHTML = `<div class="bg-gray-200 text-gray-800 px-4 py-2 rounded-2xl max-w-[70%] text-sm shadow"><b>${sender}:</b><br>...</br></div>`;
            console.log(newMessage);
            reloaKhungdChat();
        });

        //- B√°o c√°o server r·∫±ng ng∆∞·ªùi d√πng ƒë√£ ng·ª´ng typing
        input3.addEventListener('keydown', function(event) {
            if (event.key === 'Enter' ) {
                event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa form
                button.click(); // G·ªçi h√†m g·ª≠i tin nh·∫Øn
                socket.emit('typing', 'hide'); // G·ª≠i th√¥ng b√°o ƒë√£ ng·ª´ng typing ƒë·∫øn server
            } else {
                console.log("1 set");
                setTimeout(() => {
                    socket.emit('typing', 'hide'); // G·ª≠i th√¥ng b√°o ƒë√£ ng·ª´ng typing ƒë·∫øn server sau m·ªói 3 gi√¢y kh√¥ng c√≥ h√†nh ƒë·ªông n√†o
                    console.log("1 set gp");
                }, 3000);
            }

        });
        var buttonSubmitChat = document.getElementById('send-button');
        buttonSubmitChat.addEventListener('click', function(event) {
            event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa form
            socket.emit('typing', 'hide'); // G·ª≠i th√¥ng b√°o ƒë√£ ng·ª´ng typing ƒë·∫øn server
        });

        // - khi nh·∫≠n ƒë∆∞·ª£c s·ª± ƒë·ªìng √Ω t·ª´ server s·∫Ω x√≥a tin nh·∫Øn ƒëang typing
        socket.on('server drop typing', function(data) {
            console.log(data);
            const { name, user_id } = data;
                // t√¨m t·ªõi typing c·ªßa user v√† x√≥a
            typingUsers.delete(user_id); // X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch typing
            var chatMessages = document.querySelector(`.${user_id}`);
            if (chatMessages) {
                console.log("G·ªçi x√≥a")
                console.log(chatMessages)
                while (chatMessages.firstChild) {
                    chatMessages.removeChild(chatMessages.firstChild);
                }
            }
        reloaKhungdChat();
        });